trigger:
  - main

variables:
  group: 'azure-connection-vars'
  azureServiceConnection: 'MyAzureServiceConnection'
  vmImageName: 'ubuntu-latest'
  backendResourceGroup: 'terraform-backend-rg'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  dockerImageName: 'myflaskapp'

stages:
- stage: TerraformBackend
  displayName: 'Create Terraform Backend'
  # ... (keep this stage as is)

- stage: InfrastructureDeployment
  displayName: 'Deploy Azure Infrastructure'
  # ... (keep this stage as is)

- stage: BuildAndPushImage
  displayName: 'Build and Push Docker Image'
  dependsOn: InfrastructureDeployment
  variables:
    acrServiceConnection: $[ stageDependencies.InfrastructureDeployment.DeployInfrastructure.outputs['CreateACRServiceConnection.acrServiceConnection'] ]
    acrLoginServer: $[ stageDependencies.InfrastructureDeployment.DeployInfrastructure.outputs['SetInfraVariables.acrLoginServer'] ]
  jobs:
  - job: BuildPush
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: '$(acrServiceConnection)'
        repository: '$(dockerImageName)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePath)'
        tags: |
          $(Build.BuildId)
          latest

- stage: DeployToAppService
  displayName: 'Deploy to App Service'
  dependsOn:
  - InfrastructureDeployment
  - BuildAndPushImage
  variables:
    appServiceName: $[ stageDependencies.InfrastructureDeployment.DeployInfrastructure.outputs['SetInfraVariables.appServiceName'] ]
    acrLoginServer: $[ stageDependencies.InfrastructureDeployment.DeployInfrastructure.outputs['SetInfraVariables.acrLoginServer'] ]
  jobs:
  - job: Deploy
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureWebAppContainer@1
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        appName: '$(appServiceName)'
        containers: '$(acrLoginServer)/$(dockerImageName):$(Build.BuildId)'